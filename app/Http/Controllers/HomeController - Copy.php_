<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

use Mail;
use Input;
use Redirect;
use Session;
use Validator;
use App\User;
use App\Models\Page;
use App\Models\Setting;

class HomeController extends Controller
{
	// Home
	public function index()
    {
		Setting::assignSetting();
		
		$customer_name = session()->get('esskay_verify');
		
		$pageInfo = Page::getPageInfo(1);
		$pageData = json_decode($pageInfo['extras']);
		//dd($pageData);
		
		if(!$customer_name)
		{
			return redirect(url('/').'/login');
		}
		else
		{
			$parentData = \DB::table('document_category')->whereNull('parent_id')->orderBy('lft', 'ASC')->get();
		
			$parentCategoryData = $childCategoryData = array();
			
			if($parentData)
			{
				foreach($parentData as $parentRow)
				{
					$parentCategoryData[$parentRow->id] = $parentRow->name;
					
					$childData = \DB::table('document_category')->where('parent_id', $parentRow->id)->orderBy('lft', 'ASC')->get();
					
					if($childData)
					{
						foreach($childData as $childRow)
						{
							$childCategoryData[$parentRow->id][$childRow->id] = $childRow->name;
						}
					}
				}
			}
			
			$lenderData = \DB::table('lenders')->where('user_id', session()->get('esskay_user_id'))->first();
			//dd($lenderData);
			
			return view('ess-kay-home', ['customer_name' => $customer_name, 'parentCategoryData' => $parentCategoryData, 'childCategoryData' => $childCategoryData, 'lenderData' => $lenderData, 'title' => $pageData->meta_title, 'meta_description' => $pageData->meta_description, 'meta_keywords' => $pageData->meta_keywords]);
		}
	}
	
	// Login
	public function login()
    {
		Setting::assignSetting();
		
		$customer_name = session()->get('esskay_verify');
		
		$pageInfo = Page::getPageInfo(3);
		$pageData = json_decode($pageInfo['extras']);
		
		if($customer_name)
		{
			return redirect(url('/'));
		}
		else
		{
			$riders = array();
			return view('login', ['customer_name' => $customer_name, 'title' => $pageData->meta_title, 'meta_description' => $pageData->meta_description, 'meta_keywords' => $pageData->meta_keywords]);
		}
	}
	
	public function logout(Request $request)
    {
		session()->forget('esskay_name');
		session()->forget('esskay_user_id');
		session()->forget('esskay_verify');
		
		return redirect(url('/').'/');
	}
	
	// Login
	public function userOTP()
    {
		Setting::assignSetting();
		
		$customer_name = session()->get('esskay_name');
		
		$pageInfo = Page::getPageInfo(3);
		$pageData = json_decode($pageInfo['extras']);
		
		if($customer_name)
		{
			$checkRecord = \DB::table('users')->where(['email' => $customer_name])->first();
			
			$user_otp = $checkRecord->user_otp;
			return view('user_otp', ['customer_name' => $customer_name, 'user_otp' => $user_otp, 'title' => $pageData->meta_title, 'meta_description' => $pageData->meta_description, 'meta_keywords' => $pageData->meta_keywords]);
			
		}
		else
		{
			return redirect(url('/login'));
		}
	}
	
	public function saveContact(Request $request)
    {
		\DB::table('contact_us')->insert(['first_name' => $request->first_name, 'last_name' => $request->last_name, 'email' => $request->email, 'telephone' => $request->telephone, 'message' => $request->message]);
		
		\DB::table('email_sms')->insert(['send_type' => 'email', 'send_to' => $request->email, 'send_subject' => 'Contact Us', 'send_message' => $request->message, 'is_deliver' => '1']);
		
		$contactData = array('first_name' => $request->first_name, 'last_name' => $request->last_name, 'email' => $request->email, 'telephone' => $request->telephone, 'user_message' => $request->message);
		$tempUserData = array('email' => $request->email, 'name' => $request->first_name." ".$request->last_name);
		
		Mail::send('emails.contact_us', $contactData, function ($message) use ($tempUserData) {
			$message->to($tempUserData['email'], $tempUserData['name'])->subject("Contact Us");
			$message->from('communication@skfin.in', 'Ess Kay Fincorp');
		});
		
		
		
		echo "Thanks for your contact. Our team will get back to you within 24-48 hours";
	}
	
	// Forget Password
	public function forgotPassword()
    {
		Setting::assignSetting();
		
		$customer_name = session()->get('esskay_verify');
		
		$pageInfo = Page::getPageInfo(3);
		$pageData = json_decode($pageInfo['extras']);
		
		if($customer_name)
		{
			return redirect(url('/'));
		}
		else
		{
			$riders = array();
			return view('forgot-password', ['customer_name' => $customer_name, 'title' => $pageData->meta_title, 'meta_description' => $pageData->meta_description, 'meta_keywords' => $pageData->meta_keywords]);
		}
	}
	
	public function saveForgot(Request $request)
    {
		$rules = array (
			'email' => 'required',
		);
		$validator = Validator::make ( Input::all (), $rules );
		
		if ($validator->fails ()) {
			return Redirect::back ()->withErrors ( $validator, 'login' )->withInput ();
		}
		else
		{
			$checkRecord = \DB::table('users')->where(['email' => $request->email, 'user_status' => '1'])->first();
				
			if($checkRecord)
			{
				$user_id = $checkRecord->id;
				
				session ( [
					'forget_user_id' => $user_id
				] );
				
				return redirect(url('/change_password'));
			} else {
				Session::flash ( 'message', "Email not exists or not activated yet. Please try again." );
				return Redirect::back ();
			}
		}
	}
	
	// Register
	public function register()
    {
		Setting::assignSetting();
		
		$customer_name = session()->get('esskay_verify');
		
		$pageInfo = Page::getPageInfo(5);
		$pageData = json_decode($pageInfo['extras']);
		
		if($customer_name)
		{
			return redirect(url('/'));
		}
		else
		{
			$riders = array();
			return view('register', ['customer_name' => $customer_name, 'title' => $pageData->meta_title, 'meta_description' => $pageData->meta_description, 'meta_keywords' => $pageData->meta_keywords]);
		}
	}
	
	public function saveRegister(Request $request)
    {
		//name, email, telephone, organization, designation, message
		$rules = array (
			'name'     => 'required',
			'email'    => 'required',
            'telephone'    => 'required',
            'organization'     => 'required',
			'designation'     => 'required',
			'message'     => 'required',
		);
		$validator = Validator::make ( Input::all (), $rules );
		
		if ($validator->fails ()) {
			return Redirect::back ()->withErrors ( $validator, 'login' )->withInput ();
		}
		else
		{
			$user_id = \DB::table('enquiry')->insert(['name' => $request->name, 'email' => $request->email, 'telephone' => $request->telephone, 'organization' => $request->organization, 'designation' => $request->designation, 'message' => $request->message, 'created_at' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);
			
			echo "<div class='alert alert-success'>Thanks for your enquiry. Our team will get back to you within 24-48 hours</div>";
		}
	}
	
	// Update Password
	public function changePassword()
    {
		Setting::assignSetting();
		
		$customer_name = session()->get('esskay_verify');
		
		$pageInfo = Page::getPageInfo(3);
		$pageData = json_decode($pageInfo['extras']);
		
		if($customer_name)
		{
			return redirect(url('/'));
		}
		else
		{
			$userRecord = \DB::table('users')->where(['id' => session()->get('forget_user_id'), 'user_status' => '1'])->first();
			//dd($userRecord);
			
			$riders = array();
			return view('change-password', ['customer_name' => $customer_name, 'title' => $pageData->meta_title, 'meta_description' => $pageData->meta_description, 'meta_keywords' => $pageData->meta_keywords, 'user_otp' => $userRecord->user_otp]);
		}
	}
	
	public function saveChangePassword(Request $request)
    {
		$rules = array (
			'user_otp' => 'required',
			'password' => 'required',
		);
		$validator = Validator::make ( Input::all (), $rules );
		
		if ($validator->fails ()) {
			return Redirect::back ()->withErrors ( $validator, 'login' )->withInput ();
		}
		else
		{
			$userRecord = \DB::table('users')->where(['id' => session()->get('forget_user_id'), 'user_status' => '1'])->first();
			
			if($userRecord)
			{
				if($userRecord->user_otp == $request->user_otp)
				{
					$updateData = array('password' => Hash::make($request->password), 'updated_at' => date('Y-m-d H:i:s'));
					\DB::table('users')->where(['id' => session()->get('forget_user_id')])->update($updateData);
	
					session()->forget('forget_user_id');
				
					return redirect(url('/login'));
				}
				else
				{
					Session::flash ( 'message', "OTP Mistamtch. Please try again." );
					return Redirect::back ();
				}
				
			} else {
				Session::flash ( 'message', "User not exists. Please try again." );
				return Redirect::back ();
			}
		}
	}
	
	public function saveLogin(Request $request)
    {
		$rules = array (
			'email' => 'required',
			'password' => 'required' 
		);
		$validator = Validator::make ( Input::all (), $rules );
		
		if ($validator->fails ()) {
			return Redirect::back ()->withErrors ( $validator, 'login' )->withInput ();
		}
		else
		{
			$checkRecord = \DB::table('users')->where(['email' => $request->email, 'user_status' => '1'])->first();
				
			if($checkRecord)
			{
				$user_id = $checkRecord->id;
				
				//echo $request->email.",".$request->password; exit;
				
				if (Auth::attempt ( array (
					'email' => $request->email,
					'password' => $request->password
				) )) {
					$user = User::findOrFail($user_id);
					
					if($user) {
						// Find User ID
						
						session ( [
							'esskay_name' => $checkRecord->email,
							'esskay_user_id' => $user_id
						] );
						
						return redirect(url('/user_otp'));
					} else {
						Session::flash ( 'message', "Invalid Credentials, Please try again." );
						return Redirect::back ();
					}
				} else {
					Session::flash ( 'message', "Invalid Credentials, Please try again." );
					return Redirect::back ();
				}
			} else {
				Session::flash ( 'message', "Email not exists or not activated yet. Please try again." );
				return Redirect::back ();
			}
		}
	}
	
	public function saveUserOTP(Request $request)
    {
		$rules = array (
			'user_otp' => 'required',
		);
		$validator = Validator::make ( Input::all (), $rules );
		if ($validator->fails ()) {
			return Redirect::back ()->withErrors ( $validator, 'login' )->withInput ();
		}
		else
		{
			$checkRecord = \DB::table('users')->where(['email' => session()->get('esskay_name')])->where(['user_otp' => $request->user_otp])->first();
			
			if($checkRecord)
			{
				$user_otp = rand(111111, 999999);
				$updateData = array('user_otp' => $user_otp, 'updated_at' => date('Y-m-d H:i:s'));
				\DB::table('users')->where(['id' => $checkRecord->id])->update($updateData);
				
				session ( [
					'esskay_verify' => '1'
				] );
				
				return redirect(url('/'));
			} else {
				Session::flash ( 'message', "Invalid OTP, Please try again." );
				return Redirect::back ();
			
			}
		}
	}
	
	// AJAX CALL
	public function homepage()
    {	
		$customer_name = session()->get('esskay_verify');
		
		$pageInfo = Page::getPageInfo(1);
		//dd($pageInfo);
		
		return view('ess-kay-homepage', ['customer_name' => $customer_name, 'page_title' => $pageInfo->title, 'page_content' => $pageInfo->content]);
		
	}
	
	public function news()
    {	
		$customer_name = session()->get('esskay_verify');
		
		$getArticles = \DB::table('articles')->where(['status' => 'PUBLISHED'])->get();
		$articleData = array();
		
		if($getArticles)
		{
			foreach($getArticles as $getArticle)
			{
				$articleData[] = array('title' => $getArticle->title, 'content' => $getArticle->content, 'image' => $getArticle->image, 'date' => $getArticle->date);
			}
		}
		
		return view('ess-kay-news', ['customer_name' => $customer_name, 'articleData' => $articleData]);
		
	}
	
	public function contactUs()
    {	
		$pageInfo = Page::getPageInfo(2);
		
		$customer_name = session()->get('esskay_verify');
		
		return view('ess-kay-contact', ['customer_name' => $customer_name, 'page_title' => $pageInfo->title, 'page_content' => $pageInfo->content]);
		
	}
	
	public function document()
    {	
		$parentData = \DB::table('document_category')->whereNull('parent_id')->orderBy('lft', 'ASC')->get();
	
		$parentCategoryData = $childCategoryData = array();
		
		if($parentData)
		{
			foreach($parentData as $parentRow)
			{
				$parentCategoryData[$parentRow->id] = $parentRow->name;
				
				$childData = \DB::table('document_category')->where('parent_id', $parentRow->id)->orderBy('lft', 'ASC')->get();
				
				if($childData)
				{
					foreach($childData as $childRow)
					{
						$childCategoryData[$parentRow->id][$childRow->id] = $childRow->name;
					}
				}
			}
		}
		
		$lenderData = \DB::table('lenders')->where('user_id', session()->get('esskay_user_id'))->first();
		//dd($lenderData);
		
		return view('ess-kay-document', ['parentCategoryData' => $parentCategoryData, 'childCategoryData' => $childCategoryData, 'lenderData' => $lenderData]);
	}
}
